{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address payable",
						"name": "_owner",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "FeePaid",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [],
				"name": "FEE_BASE",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "_recipients",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address payable",
						"name": "_addrs",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "addRecipients",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "_splitPaymentAddress",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address payable",
						"name": "_addrs",
						"type": "address"
					}
				],
				"name": "getFeeByAddress",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "fee",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getTotalFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "totalFee",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address payable",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paySplitFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "recipients",
				"outputs": [
					{
						"internalType": "address payable",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"author": "Gustavo Henrique / gustavo@useinsignia.com",
			"kind": "dev",
			"methods": {
				"addRecipients(address,uint256)": {
					"details": "The total sum of percentage is 100%, in this way be aware of the _amount",
					"params": {
						"_addrs": "The address of the recipient",
						"_amount": "The percentage amount to pay"
					}
				},
				"getAddress()": {
					"details": "This method supports PaymentSplitFactory contract",
					"returns": {
						"_splitPaymentAddress": "Address of the payment sppliter contract"
					}
				},
				"getFeeByAddress(address)": {
					"params": {
						"_addrs": "The address of the recipient"
					},
					"returns": {
						"fee": "The percentage amount to pay"
					}
				},
				"getTotalFee()": {
					"returns": {
						"totalFee": "The total percentage amount to pay"
					}
				},
				"paySplitFee()": {
					"details": "The total sum of percentage is 100%, in this way be aware of the _amount,   a possible improvement is use getTotalFee verification"
				}
			},
			"title": "Payment sppliter",
			"version": 1
		},
		"userdoc": {
			"events": {
				"FeePaid(address,uint256)": {
					"notice": "Payment sent to recipients"
				}
			},
			"kind": "user",
			"methods": {
				"addRecipients(address,uint256)": {
					"notice": "Method for adding new recipients"
				},
				"getAddress()": {
					"notice": "Public method to retrieve contract's address"
				},
				"getFeeByAddress(address)": {
					"notice": "Method to retrieve the amount to pay for a recipient"
				},
				"getTotalFee()": {
					"notice": "Public method to retrieve the total amount registered"
				}
			},
			"notice": "PaymentSplit contract",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Contracts/PaymentSplit.sol": "PaymentSplit"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"Contracts/PaymentSplit.sol": {
			"keccak256": "0x6705bdc200439792379f15ffe2413ce127706b6dfe3b8c23045a611a9afaa32c",
			"license": "MIT",
			"urls": [
				"bzz-raw://7b03969272c2985b2505b1cbfad83771367c997da48ca83eab75a424dee43384",
				"dweb:/ipfs/QmcdeR3yXKwNXDi7y8ftuYZbM35KpXNi5TEK9NzPL18KCy"
			]
		}
	},
	"version": 1
}