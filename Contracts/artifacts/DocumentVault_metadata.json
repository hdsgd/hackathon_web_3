{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_minimunFee",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "publisher",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "docProcess",
						"type": "string"
					}
				],
				"name": "NewDocAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "enable",
						"type": "bool"
					}
				],
				"name": "SetWhitelistByAddress",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_typeOfDocument",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_docsURI",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_docsURIChesksum",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_publisherResponsible",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_docProcess",
						"type": "string"
					}
				],
				"name": "addNewDoc",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					}
				],
				"name": "isWhitelist",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address payable",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"name": "registeredDocs",
				"outputs": [
					{
						"internalType": "string",
						"name": "typeOfDocument",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "docsURI",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "docsURIChesksum",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "publisherResponsible",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "enable",
						"type": "bool"
					}
				],
				"name": "setWhitelist",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"author": "Gustavo Henrique / gustavo@useinsignia.com",
			"kind": "dev",
			"methods": {
				"addNewDoc(string,string,string,string,string)": {
					"details": "The owner of the contract could insert a fee to publish data, default 0 , e.g. 100 = 1%",
					"params": {
						"_docProcess": "The string to retrieve the data, should be related to the context of the documentation",
						"_docsURI": "The IPFS CID of the tree documentation  e.g. Auction_Docs",
						"_docsURIChesksum": "The hash of the tree documentation, certify the integrity of the data",
						"_publisherResponsible": "The responsible for publishing the documentation",
						"_typeOfDocument": "Type of the document added"
					}
				},
				"constructor": {
					"details": "Sets the values for :  {minimunFee} -> The fee charged on every new document added"
				},
				"getBalance()": {
					"returns": {
						"_0": "uint of the total native token balance"
					}
				},
				"isWhitelist(address)": {
					"params": {
						"_account": "Consultant address"
					},
					"returns": {
						"_0": "Boolean of the privilege setted"
					}
				},
				"setWhitelist(address,bool)": {
					"params": {
						"_account": "The address to insert",
						"enable": "True to guarantee privilegies, false to remove privilegies"
					}
				}
			},
			"title": "Vault for store real estate documents",
			"version": 1
		},
		"userdoc": {
			"events": {
				"NewDocAdded(address,string)": {
					"notice": "New document added"
				},
				"SetWhitelistByAddress(address,bool)": {
					"notice": "New address added to allowed publishers"
				}
			},
			"kind": "user",
			"methods": {
				"addNewDoc(string,string,string,string,string)": {
					"notice": "Method for adding new documentation"
				},
				"getBalance()": {
					"notice": "Public method to retrieve contract's balance"
				},
				"isWhitelist(address)": {
					"notice": "Public method to check if address has privilegies"
				},
				"setWhitelist(address,bool)": {
					"notice": "Method to insert new address to the whitelist"
				}
			},
			"notice": "DocumentVault contract",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Contracts/DocumentVault.sol": "DocumentVault"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"Contracts/DocumentVault.sol": {
			"keccak256": "0xd10c53c417db50e48b18af8e747c4543079d548befc54628ef0c4c07411977d0",
			"license": "MIT",
			"urls": [
				"bzz-raw://aaca7298cce1846404382921ded9eca3abb56e4aebdf7dfec1209cd908c69f96",
				"dweb:/ipfs/QmXSspZCLLcvR9SrZoWtCuiv4c5uMfZAcDz59c3zAVNBTK"
			]
		}
	},
	"version": 1
}